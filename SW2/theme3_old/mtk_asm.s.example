.section .text

.global swtch
.global pv_handler
.global init_timer
.global first_task
.global	P
.global	V
	
.equ IOBASE,    0x00d00000
.equ LED1,      IOBASE+0x000003b


P:
	movem.l	%d0-%d1, -(%sp)
	move.l	#0, %d0
	move.l	12(%sp), %d1 |semapho_idをセット
	trap	#1           |割り込み処理：pv_handler
	movem.l	(%sp)+, %d0-%d1
	rts

V:
	movem.l %d0-%d1, -(%sp)
        move.l  #1, %d0
        move.l  12(%sp), %d1 |semapho_idをセット
        trap    #1          |割り込み処理：pv_handler
	movem.l (%sp)+, %d0-%d1
        rts

pv_handler:
	movem.l %d0-%d7/%a0-%a6, -(%sp)
	move.w  %sr, -(%sp) |srおよびシステムレジスタの退避
	move.w	#0x2700, %sr
	
	move.l	%d1, -(%sp) /*引数push*/
	
	cmp.l	#0, %d0 |Pから呼ばれた場合
	beq	p_handler
	cmp.l	#1, %d0 |Vから呼ばれた場合
	beq	v_handler

p_handler:
	jsr	p_body |P命令
	bra	end_handler

v_handler:
	jsr	v_body |V命令

end_handler:
	add.l	#4, %sp |引数をpop
	move.w	(%sp)+, %sr
	movem.l	(%sp)+, %d0-%d7/%a0-%a6
	rte

**---------------------------------------------------switch

.extern task_tab
.extern curr_task
.extern next_task


swtch:
	move.w	%sr, -(%sp) |srおよびシステムレジスタの退避
	movem.l	%d0-%d7/%a0-%a6, -(%sp)
	
	move.l	%USP, %a6
	move.l	%a6, -(%sp) | %USP push
	
	/*TCBの位置探索	and SSPの記録*/
	lea.l	task_tab, %a0
	move.l	curr_task, %d0 |現在のタスクID
	mulu.w	#20, %d0 | |TCB_TYPE| = 20より
	adda.l	%d0, %a0 | task_tab[curr_task].(*task_addr)()
	addq.l	#4, %a0 | task_tab[curr_task].*stack_ptr	
	move.l	%sp, (%a0) | task_tab[curr_task].*stack_ptr = %sp

	/*curr_taskの変更*/
	lea.l	curr_task, %a1
	move.l	next_task, (%a1) |curr_task = next_task

	/*新しいTCBの位置探索 and SSPの読み出し*/
	/*curr_task = next_task*/
        lea.l   task_tab, %a0
        move.l  curr_task, %d0 |現在のタスクID
        mulu.w  #20, %d0 | |TCB_TYPE| = 20より
        adda.l  %d0, %a0 | task_tab[curr_task].(*task_addr)()
        addq.l  #4, %a0 | task_tab[curr_task].*stack_ptr        
        move.l	(%a0), %sp | %sp = task_tab[curr_task].*stack_ptr
	
	/*%USPの復帰*/
	move.l	(%sp)+, %a6
	move.l	%a6, %USP

	movem.l	(%sp)+, %d0-%d7/%a0-%a6 |システムレジスタの復帰
	rte

**-----------------------------------------------------timer

.extern addq
.extern sched
.extern ready

**マルチタスクを開始するためのサブルーチン。
first_task:
	
	**現在のタスクのTCBのアドレスを見つける
	move.l #0, %d1
	move.l curr_task, %d1	
	lea.l task_tab, %a0
	mulu #20, %d1
	adda.l %d1, %a0		/*a0 = &task_tab[curr_task]*/
	
	**SSPの回復
	addq.l #4, %a0		/*a0 = &task_tab[curr_task].stack_ptr*/
	move.l (%a0), %sp	/*a0をspに入れる*/

	**USPの回復
	move.l (%sp)+, %a6	/*spの値を用いてUSPをスタックから取り出す*/
	move.l %a6, %USP	/*直接できないのでa6をクッションに*/

	**15本のレジスタの回復
	movem.l (%sp)+, %d0-%d7/%a0-%a6	/*各レジスタの値も取り出す*/
	
	**レジスタを変更するサブルーチンなのでレジスタの退避・復帰は不要
	rte


**タイマーによって一定間隔で起動されるサブルーチン。
**タイムアップした現在のタスクから他のタスクへの切り替えを行う。
hard_clock:
	movem.l %d0 ,-(%sp)	/*ここで使用するd0のみ退避*/

	move.w	4(%sp), %d0
	btst.l	#13, %d0	/*spの13ビット目を調べ、スーパーバイザモードかどうか調べる*/
	bne	end_hard_clock

	move.l	curr_task, -(%sp)	/*addqの引数をスタックに積む*/
	move.l	#ready, -(%sp)
	jsr addq
	add.l	#8, %sp 	/*引数をpop*/
	
	jsr sched
	jsr swtch
	
end_hard_clock:	
	movem.l (%sp)+, %d0
	rts			/*タイマ用割り込み処理インタフェースから呼びだすためrtsで戻る*/

**タイマーを起動するサブルーチン。set_timer,reset_timerを呼び出す。
init_timer:
	movem.l %d0-%d2, -(%sp)
	
	**タイマーリセット
	move.l #3,%D0 
	trap   #0

	**タイマーセット
	move.l #4, %D0
	move.w #10000, %D1	/*1秒間隔でhard_clockが起動するようにしている。*/
	move.l #hard_clock, %D2
	trap #0

	movem.l (%sp)+, %d0-%d2
	rts


