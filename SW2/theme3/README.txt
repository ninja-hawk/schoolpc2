mon.oの差し替えはMakefileのtest3の項目に追加しているため、
```
make test3
```
を実行するだけで実行可能。



個人課題について

test3.c では マルチタスク 環境を 用いて 、 「 仲間外れ 探し a という 文字 の 中から
文字 e を 探す チャット 」 を 作成した 。 ここ で mtk_asm.s で タイマ割り込み 周期を
1 0.1ms に 設定 しておく 。 このとき 、 登録した 二つの タスクで は それぞれ ポート 0 ,1 から
入力を 受け付け 、 入力がなければ 一方の タスクに 遷移し 、 入力が あれ ば 資源 ０ を 占有
し 、 入力 値の 削除 ・ 出力 を 行った 後で 資源 ０ の 解放を 行っている 。 そうする ことで 疑
似的に 両ポートから 同時 入力 を 可能にしている 。 このとき 、 自分 側の 入力は 右側 に 相手の
入力は 左側になるように 出力 する 、 L INE ライクな 仕様に なっている 。
また 、 ポート 0 側で s tart と 入力すると 、 力が あれ ば 資源 ０ を 占有 し 、 入力 値
の 削除 ・ 出力 を 行った 後で 資源の 解放を 行うのではなく 、 仲間外れ 探し が 開始する 。 ポー
ト 0 側では 仲間 外れ探し を する ときの マップ の 設定を 横 ・ 縦の 文字数で 指定する 。 なお 、
このとき に ポート 1 から の 入力値 は 資源が ポート 0 の タスク に 占有され て いるため 起
こらない 。 ポート 0 での 設定が 終わると 資源 ０ を 開放して ゲーム が 始まる 。 このとき 、
再度 両ポート からの 入力 を ゲーム開始前と 同様に 受け付けるが 、 今度は 毎度 出力 の 旅に 間
違い e の ある 座標かどうか 判定し 、 正しい 座標が入ると 答え が 表示され 、 勝者が 表示され
る仕様に なっている 。 厳密にいうと 、 どちらかが 正しい 入力を 行い 、 ポート の 入力を 受
け付けている タスク 1 が 出力を 行う際に 答え が 表示される そして 、 また チャット 機能 へ
と 戻り 、 何度でも 仲間外れ探し を することができる 。