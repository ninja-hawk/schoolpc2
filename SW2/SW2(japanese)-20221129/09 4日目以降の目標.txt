4日目以降の目標：テーマ2の分担開発

・担当部のプログラム開発が終わったら、班内でプログラムの読み合わせを行う。
・読み合わせが終わったら、分担プログラムを統合し、デバッグへ。（進行度目安：8日目）
・デバッグ手順はテキストp.39後半にある D1-D5 の段階を踏む方法を推奨するが、その限りではない。
◎テーマ2ができたら、その環境を保存しておくこと.テーマ2,3の試問で動作再現が要求される。

・4日目は、テーマ1の試問アナウンスを行う（予定)。

・テーマ1のレポートにテーマ2の環境における思考実験があるが、思考実験における都合の良いタイミングの
  実装が面倒なので、この思考実験をそのままテーマ2のテストプログラムに使おうと考えない方が良い。

・D1でのデバッグ注意事項 (モニタの問題を除く)
  set_task()    TCBへのtask_addr代入状況
  init_stack()  各レジスタ,USP,SR,PCの型に見合った代入がされているか
                USP,PCに代入すべきはアドレス(ポインタ値)である
                  ユーザタスクに適切なSRの値は?
　　　　　　　　SSPの位置はずれていないか？
  begin_sch()   removeq 操作は適切か
  first_task    タスク復元操作はinit_stack()の構造と一致しているか

・D3でのデバッグ注意事項
　swtch()	P.37, 2.5.3節のタスクスイッチ関数 swtch() の説明に従って設計する。
		swtch()で状態保存されたタスクに切り替わる場合(タスク開始以外)
		タイマ割り込みでは、エントリ → JSR call_rp → JSR [hard_clock]→ JSR swtch
		sleepでは、Trap #1 エントリ(pv_handler) → sleep() → swtch()
		の様に swtch() が呼ばれるため、スタックの状態は各種割り込み開始時の
		 (割り込み戻りPC＋SR＋割り込み処理直後のレジスタ全保存) の下に2、3つのPC
		  (JSR call_rp の戻りPC)+(JSR [hard_clock] の戻りPC)+(JSR swtch の戻りPC)
		  (JSR sleep の戻りPC)+(JSR swtch の戻りPC)
		があるので、タイマ割り込み開始時の (PC＋SR＋全レジスタ保存) 情報はタスク
		切り替え用としては使えない.※
		スタック直近の (JSR swtch の戻りPC) をタスク切り替えの復帰PCと捉え、
		ここから (SR, 全レジスタ, USP) をスタックに積めば、swtch()のRTE でタスクが
		切り替わり、PCは (JSR swtch の戻り先) に移る。
		ユーザタスクのSRは各種割り込み開始時の保存情報にあり、割り込み処理のカーネル
		サービス中にタスクが切り替わる事になる。
		タスク切り替えのために保存するSRの値をどうするかだが、２つの方法がある。
			a. スーパーバイザモードでタイマ割り込み中に相当する走行レベルを
			　　決め打ちで設定
			b. MC68VZ328には特権命令 MOVE fron SR (MOVE SR,<ea:w>)
			   があるので、これを用いてswtch()動作中のSRの値を保存
			　　(68000 には無い命令)
		以上、swtch()のRTEはタスク切り替えの最終段階でSRとPCを切り替えるために
		使用され、割り込み処理の復帰としてのRTEではない。タイマ割り込み処理の復帰と
		しての RTE は別にあり、D2で検証済み。
		　　　-> モニタ内のタイマ用ハード割込みインタフェースの
		　　　　　JSR call_rp の後の RTE が該当する。
		※hard_clock は、モニタのシステムコール set_timerの D2 に指定される
		　タイマ割り込み処理の実体サブルーチンなので、戻り方は RTE ではなく RTS。
		(hard_clock の戻り方について指示誤りがありましたので訂正。)
　旧curr_taskがreadyキューに再接続されずに取りこぼされていないかは、readyキューのリンクリストをユーザタスクで表示させれば確認できる。

・D4, D5 でのデバッグ注意事項
　D4は大域変数へのアクセス、D5はCPUを共有資源としたユーザタスクを作成する。
　Critical sectionの設定だけではなく、他タスクが割り込む隙の量も検討する.
　タスク制御状況は、ready, semaphore各キューのリンクリストをユーザタスクで表示すれば確認できる。


